/max { 2 copy lt { exch } if pop } bind def

/circle {
  newpath
    0 360 arc
  closepath
} def

/legendlabelDict 1 dict def
/legendlabel {
	legendlabelDict begin
		/fontsize exch def
		/font exch def
		/keygray exch def
		/keylabel exch def
		/typegray exch def
		/typelabel exch def
		/y exch def
		/x exch def
		
		gsave	
			font fontsize scalefont setfont
		
			gsave
			x y moveto			
				keygray setgray
				keylabel show
			grestore
			
			gsave
			x y fontsize add moveto
				typegray setgray
				typelabel show
			grestore
		grestore
	end
} def

/arealegendDict 1 dict def
/arealegend {
	arealegendDict begin
		/fontsize exch def
		/font exch def
		/keygray exch def
		/keylabel exch def
		/typegray exch def
		/typelabel exch def
		/extremalabelgray exch def
		/maxlabel exch def
		/minlabel exch def
		/circlegray exch def
		/maxradius exch def
		/minradius exch def
		%/height exch def
		%/width exch def
		/y exch def
		/x exch def

		gsave
			font fontsize scalefont setfont
			
			/minlabelwidth {minlabel stringwidth pop} bind def
			/maxlabelwidth {maxlabel stringwidth pop} bind def
		
			/minCircleX {minlabelwidth 2 div minradius max x add} bind def %{width 3 div x add} bind def
			%/minCircleY {y height 3 div add} bind def		
			/maxCircleX {minlabelwidth 2 div maxlabelwidth 2 div add maxradius minradius add max minCircleX add 20 add} bind def %{2 width mul 3 div x add} bind def
			%/maxCircleY {y height 3 div add} bind def

			gsave
				circlegray setgray
				minCircleX y fontsize add maxradius add 5 add minradius circle stroke
			gsave
		
			minCircleX minlabelwidth 2 div sub y moveto
			gsave				
				extremalabelgray setgray
				minlabel show
			grestore
			
			gsave
				circlegray setgray
				maxCircleX y fontsize add maxradius add 5 add maxradius circle stroke
			grestore
			
			maxCircleX maxlabelwidth 2 div sub y moveto
			gsave
				extremalabelgray setgray			
				maxlabel show
			grestore
		grestore
		
		x y fontsize add maxradius add maxradius add 10 add typelabel typegray keylabel keygray font fontsize legendlabel
	end
} def

% x y gradientwidth gradientheight lowcolorred lowcolorgreen lowcolorblue highcolorred highcolorgreen highcolorblue
% Draw a gradient from lowcolor to highcolor with lower-left corner (x, y)
% having the given width and height.
/labeledgradientDict 1 dict def
/labeledgradient {
	labeledgradientDict begin		
		/fontsize exch def
		/font exch def 
		/keygray exch def
		/keylabel exch def
		/typegray exch def
		/typelabel exch def
		/extremalabelgray exch def
		/maxlabel exch def
		/minlabel exch def	
		/highcolorblue exch def
		/highcolorgreen exch def
		/highcolorred exch def
		/lowcolorblue exch def
		/lowcolorgreen exch def
		/lowcolorred exch def
		/resolution exch def
		/gradientheight exch def
		/gradientwidth exch def
		/y exch def
		/x exch def
		
		/first x def
		/last x gradientwidth add resolution sub def
		
		gsave
			x resolution last {
				dup
				y fontsize add 2 add resolution gradientheight box
								
				dup first last lowcolorred highcolorred interpolate
				1 index first last lowcolorgreen highcolorgreen interpolate
				2 index first last lowcolorblue highcolorblue interpolate
				setrgbcolor
				
				fill				
			} for
		grestore
		
		gsave
			font fontsize scalefont setfont
			extremalabelgray setgray
			
			x y moveto
			minlabel show
			
			x gradientwidth add maxlabel stringwidth pop sub y moveto
			maxlabel show
		grestore
		
		x y fontsize add gradientheight add 10 add typelabel typegray keylabel keygray font fontsize legendlabel
	end
} def

% x y width height red green blue
% Draw counter-clockwise from lower-left the box whose
% lower-left corner is (x, y) having the given width and height.
/boxDict 1 dict def
/box {
	boxDict begin
		/height exch def
		/width exch def
		/y exch def
		/x exch def
		
		newpath
			x y moveto
			width 0 rlineto
			0 height rlineto
			width neg 0 rlineto
		closepath
	end
} def

% x xmin xmax ymin ymax
% Linear interpolation from xmin-to-xmax to ymin-to-ymax
/interpolateDict 1 dict def
/interpolate {
	interpolateDict begin
		/ymax exch def
		/ymin exch def
		/xmax exch def
		/xmin exch def
		/x exch def
		
		ymax ymin sub xmax xmin sub div x xmin sub mul ymin add
	end
} def